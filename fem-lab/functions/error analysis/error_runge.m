function [l2,runge] = error_runge(min_mesh, polynomial_deg)    max_mesh = 1;    counter = 1;    l2 = zeros(10,1);    runge = zeros(10,1);    pol_deg= polynomial_deg    mesh_size = max_mesh;    SF=sf_generate(pol_deg);                % Initialize right hand side of strong formulation    f = @(x,y) cos(x*pi).*cos(y*pi);    % Initialize exact solution    u_exact=@(x,y) cos(x*pi).*cos(y*pi)*(1/(1+2*pi*pi));    % Initial     u_1 = @(x,y) 1;        while(mesh_size > min_mesh)                    %mesh_size         %[Vertex_1,Cell_1]=mesh_generate(mesh_size);        %SM_1=sm_assemble_global(mesh_size,pol_deg);        %rhs_1=rhs_integration(mesh_size,SF,f);        %u_coeff_1=ls_solve(SM_1,rhs_1);        %u_1=@(x,y) hf_eval_solution(x,y,u_coeff_1,Cell_1,Vertex_1,pol_deg,SF);        %mesh_size/2        mesh_size = mesh_size/2;        [Vertex_2,Cell_2]=mesh_generate(mesh_size);        SM_2=sm_assemble_global(mesh_size,pol_deg);        rhs_2=rhs_integration(mesh_size,SF,f);        u_coeff_2=ls_solve(SM_2,rhs_2);        u_2=@(x,y) hf_eval_solution(x,y,u_coeff_2,Cell_2,Vertex_2,pol_deg,SF);                l2(counter)=error_L2(u_1,u_exact,100)        runge(counter) = error_L2(u_1,u_2,100)        counter++;                u_1 = u_2;    endwhileendfunction