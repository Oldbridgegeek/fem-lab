function correct = test_assemble_global()    % Test wheter sm_assemble_global delivers correct values by testing a special case.     % We will consider mesh size 0.5 and polynomial degree 1 and hardcode the solution for that case.    % correct will be a matrix, which will contain 0 and 1. If the entry is 0 at (i,j), it means the matrix delivered by     % sm_assemble_global is not correct at (i,j), otherwise it is correct.        % Initialize correct matrix    correct = zeros(9,9);        % Calculate matrix assembled by the function to be tested.    stiffness_generated = sm_assemble_global(0.5,1);        % ---- Hardcode solution ----        % Define local shape functions in lexicographical order, as are the elements.    % 1. Element    shape_function_1 = [1,-2,-2,4;0,2,0,-4;0,0,2,-4;0,0,0,4];        % 2. Element    shape_function_2 = [2,-2,-4,4;-1,2,2,-4;0,0,4,-4;0,0,-2,4];     % 3. Element    shape_function_3 = [2,-4,-2,4;0,4,0,-4;-1,2,2,-4;0,-2,0,4];    % 4. Element    shape_function_4 = [4,-4,-4,4;-2,4,2,-4;-2,2,4,-4;1,-2,-2,4];        % Initialize stiffness matrix for the hardcoded solution    stiffness_matrix = zeros(9,9);        % Calculate stiffness_matrix for the hardcoded solution    cell_matrix = mesh_cell(0.5,1);    for i=1:9        for j=1:9            value = 0;            % 1. Element            if ( mesh_renumber(cell_matrix,1,i) != 0 && mesh_renumber(cell_matrix,1,j) != 0 )                shape_function_i = shape_function_1(mesh_renumber(cell_matrix,1,i),:);                shape_function_j = shape_function_1(mesh_renumber(cell_matrix,1,j),:);                [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);                [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);                f = @(x,y) hf_eval_poly(x,y,shape_function_i).*hf_eval_poly(x,y,shape_function_j);                h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).*hf_eval_poly(x,y,dx_shape_function_j) ;                h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;                value = value +  dblquad(f,0,0.5,0,0.5) + dblquad(h_1,0,0.5,0,0.5) + dblquad(h_2,0,0.5,0,0.5);            endif            % 2. Element            if ( mesh_renumber(cell_matrix,2,i) != 0 && mesh_renumber(cell_matrix,2,j) != 0 )                shape_function_i = shape_function_2(mesh_renumber(cell_matrix,2,i),:);                shape_function_j = shape_function_2(mesh_renumber(cell_matrix,2,j),:);                [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);                [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);                f = @(x,y) hf_eval_poly(x,y,shape_function_i).*hf_eval_poly(x,y,shape_function_j);                h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).*hf_eval_poly(x,y,dx_shape_function_j) ;                h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;                value = value +  dblquad(f,0.5,1,0,0.5) + dblquad(h_1,0.5,1,0,0.5) + dblquad(h_2,0.5,1,0,0.5);            endif            % 3. Element            if ( mesh_renumber(cell_matrix,3,i) != 0 && mesh_renumber(cell_matrix,3,j) != 0 )                shape_function_i = shape_function_3(mesh_renumber(cell_matrix,3,i),:);                shape_function_j = shape_function_3(mesh_renumber(cell_matrix,3,j),:);                [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);                [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);                f = @(x,y) hf_eval_poly(x,y,shape_function_i).*hf_eval_poly(x,y,shape_function_j);                h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).*hf_eval_poly(x,y,dx_shape_function_j) ;                h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;                value = value +  dblquad(f,0,0.5,0.5,1) + dblquad(h_1,0,0.5,0.5,1) + dblquad(h_2,0,0.5,0.5,1);            endif            % 4. Element            if ( mesh_renumber(cell_matrix,4,i) != 0 && mesh_renumber(cell_matrix,4,j) != 0 )                shape_function_i = shape_function_4(mesh_renumber(cell_matrix,4,i),:);                shape_function_j = shape_function_4(mesh_renumber(cell_matrix,4,j),:);                [dx_shape_function_i,dy_shape_function_i] = sf_derivate(shape_function_i);                [dx_shape_function_j,dy_shape_function_j] = sf_derivate(shape_function_j);                f = @(x,y) hf_eval_poly(x,y,shape_function_i).*hf_eval_poly(x,y,shape_function_j);                h_1 = @(x,y) hf_eval_poly(x,y,dx_shape_function_i).*hf_eval_poly(x,y,dx_shape_function_j) ;                h_2 = @(x,y) hf_eval_poly(x,y,dy_shape_function_i).*hf_eval_poly(x,y,dy_shape_function_j) ;                value = value +  dblquad(f,0.5,1,0.5,1) + dblquad(h_1,0.5,1,0.5,1) + dblquad(h_2,0.5,1,0.5,1);            endif            stiffness_matrix(i,j) = value;          endfor    endfor    stiffness_matrix    stiffness_generated    % -------- Stiffness matrix is now hardcoded --------    % Compare values in each entry        for i=1:9        for j=1:9            % Check if values are equal            if( abs(stiffness_matrix(i,j)-stiffness_generated(i,j)) < 0.1 )                 % Correct Matrix should be 1 at that position, if values are equal.                correct(i,j) = 1;            endif        endfor    endforendfunction