function SM_local = sm_assemble_local(SF,mesh_size)    tic    % Initialize Gauss Quadratur    degree_polynomial = sqrt(length(SF))-1;        [sample_points,weights] = int_gauss_weights(degree_polynomial*10,0,1);        % Calculate derivates of shape functions    [dx_SF,dy_SF]= sf_derivate(SF);        % Initialize local stiffness matrix    SM_local = zeros(length(SF),length(SF));            % Calculate diagonal matrix    for i=1:length(SF)        i_th_shape_function = SF(i,:);        dx_i_th_shape_function = dx_SF(i,:);        dy_i_th_shape_function = dy_SF(i,:);        for j=i:length(SF)            j_th_shape_function = SF(j,:);            dx_j_th_shape_function = dx_SF(j,:);            dy_j_th_shape_function = dy_SF(j,:);            val=0;            f = @(x,y) mesh_size^2 * hf_eval_poly(x,y,i_th_shape_function).*hf_eval_poly(x,y,j_th_shape_function);            h_1 = @(x,y) hf_eval_poly(x,y,dx_i_th_shape_function).*hf_eval_poly(x,y,dx_j_th_shape_function);            h_2 = @(x,y) hf_eval_poly(x,y,dy_i_th_shape_function).*hf_eval_poly(x,y,dy_j_th_shape_function);            % dblquad integration            % val = dblquad(f,0,1,0,1) + dblquad(h_1,0,1,0,1) + dblquad(h_2,0,1,0,1);            % Gauss quadratur            % Which is exact for polynomials up to order degree_polynomial+1            val = int_gauss_vectorized(sample_points,weights,sample_points,weights,f) + int_gauss_vectorized(sample_points,weights,sample_points,weights,h_1) + int_gauss_vectorized(sample_points,weights,sample_points,weights,h_2);            SM_local(i,j) = val;        endfor    endfor            % Use symmetry to get other values    for i=2:length(SF)        for j=1:i            SM_local(i,j) = SM_local(j,i);        endfor    endfor    notvectorizes=toc;    endfunction