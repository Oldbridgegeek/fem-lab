function SM_local = sm_assemble_local_vectorized(mesh_size,SF)    % This script should compute the entries of the local stiffnes matrix with optimized runtime.    tic        % Initialize Gauss Quadratur    degree_polynomial = sqrt(length(SF))-1;    [sample_points,weights] = int_gauss_weights(100,0,1);    % Calculate derivates of shape functions    [dx_SF,dy_SF]= sf_derivate(SF);        % Initialize local stiffness matrix    SM_local = zeros(length(SF),length(SF));        % Calculate diagonal matrix    f= @(x,y) (mesh_size*hf_eval_poly(x,y,SF))*(mesh_size*hf_eval_poly(x,y,SF))' + (hf_eval_poly(x,y,dx_SF))*(hf_eval_poly(x,y,dx_SF))' + (hf_eval_poly(x,y,dy_SF))*(hf_eval_poly(x,y,dy_SF))';        size(f(eye(3),eye(3)))            % dblquad integration    % val = dblquad(f,0,1,0,1) + dblquad(h_1,0,1,0,1) + dblquad(h_2,0,1,0,1);        % Gauss quadratur    % Which is exact for polynomials up to order degree_polynomial+1    SM_local = int_gauss_vectorized_matrices(sample_points,weights,sample_points,weights,f);        vectorized=toc    endfunction