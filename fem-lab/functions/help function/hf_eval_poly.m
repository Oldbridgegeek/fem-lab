function val = hf_eval_poly(x,y,coefficient_vector)    % x and y should be real valued numbers    % coefficient_vector should be a vector containing the coeffcients of the polynomial we want to evaluate    % the order of the basis of the polynomial is described in the documentation but let's make an example for the    % ordering briefly.    % level= 0 : coefficient_vector(1) * x^0 y^0    % level= 1 : coefficient_vector(2) *x^1 y^0, coefficient_vector(3) *x^0 y^1 ,coefficient_vector(4) * x^1 y^1    % level= 2 : coefficient_vector(5) *x^2 y^0, coefficient_vector(6) *x^2 y^1 ,coefficient_vector(7) * x^0 y^2 , coefficient_vector(8) *x^1 y^2 , coefficient_vector(9) *x^2 y^2    % and so on.        level=0;    % we start with level 0 and iterate until we are the end of coefficient_vector    j=1;        % row number in the coefficient_vector         % Initialize value of our evaluation    val=0;         % --------- Polynomial evaluation ---------    while j < length(coefficient_vector)        exponent_x=level;        exponent_y=0;        while(exponent_y < level)            val= val + coefficient_vector(:,j).*x.^(exponent_x).*y.^(exponent_y);            exponent_y++;            j++;        endwhile        exponent_x = 0;        exponent_y = level;        while(exponent_x < level)            val= val+ coefficient_vector(:,j).*x.^(exponent_x).*y.^(exponent_y);            exponent_x++;            j++;        endwhile        val= val+ coefficient_vector(:,j).*x.^(level).*y.^(level);        j++;        level++;    endwhile    % -----------------------------------endfunction