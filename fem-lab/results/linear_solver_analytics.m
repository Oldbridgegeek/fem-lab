function linear_solver_analytics()    % Add all subfolders to working directory    add_fem_lab();        % Define the smallest mesh size in the form of 1/mesh_size.     MIN_MESH_SIZE = 128;        % Initialize error vectors containing the errors for different mesh sizes for the different linear solvers    ls_error_gmres = zeros(1,1);    ls_error_cg = zeros(1,1);    ls_error_minres = zeros(1,1);        % Initialize vectors containing the runtimes for different mesh sizes for the different linear solvers    runtime_gmres = zeros(1,1);    runtime_cg = zeros(1,1);    runtime_minres = zeros(1,1);        % Loop from 1 until 1/MIN_MESH_SIZE for even mesh_size numbers and solve FEM problem for each mesh size and    % calculate the error and the runtime for the different linear solvers. 	i = 1;    while (2^i) <= MIN_MESH_SIZE        disp("Step:"),disp(2^i) ;        fflush(stdout);        		% Vector for plotting		x(i) = 2^i;        % Calculate Stiffness Matrix        mesh_size= 1/(2^i);         pol_deg= 1;        % Initialize our mesh and our coefficient matrix for the shape functions        [Vertex,Cell]=mesh_generate(mesh_size);        SF=sf_generate(pol_deg);        % sm_assemble_local computes the local stiffness matrix. In our case,the local stiffness matrix looks the same for every cell.        SM_local=sm_assemble_local_vectorized(mesh_size,SF);        % sm_assemble_global will give the global stiffness matrix        A=sm_assemble_global(mesh_size,pol_deg,SM_local);        % Initialize right hand side of our linear system        f = @(x,y) cos(x*pi).*cos(y*pi);        b= rhs_integration_vectorized(Vertex,Cell,SF,f);            % GMRES        tic        x1= gmres(A,b) ;        gmres_runtime=toc;            % MINRES        tic        x2= ls_minres(A,b,b,100,10^(-10));        minres_runtime=toc;            % CG Linear solver        tic        x3=ls_cg(A,b,b);        cg_runtime=toc;            % Error and runtime for GMRES        ls_error_gmres(i)=(A*x1-b)'*(A*x1-b);        runtime_gmres(i)=gmres_runtime;                % Error and runtime for CG        ls_error_cg(i)=(A*x3-b)'*(A*x3-b);        runtime_cg(i)=cg_runtime;                % Error and runtime for MINRES        ls_error_minres(i)=(A*x2-b)'*(A*x2-b);        runtime_minres(i)=minres_runtime;		i=i+1;         endwhile    % Plot error results	h = figure(1);    semilogy(x,ls_error_gmres,'b',"linewidth",1,x,ls_error_cg,'r',"linewidth",1, x,ls_error_minres,'g',"linewidth",1);	grid on;	set(gca, "linewidth", 0.5 , "fontsize", 12)	title('Error behaviour compared for GMRES, CG and MINRES for varying mesh sizes');	leg = legend ({"GMRES"}, "CG" , "MINRES");	axis([2 MIN_MESH_SIZE]);	legend (leg, "location", "northwest");	set (leg, "fontsize", 15 , "linewidth", 1);    xlabel("1/MESH SIZE");    ylabel("L2 Error");	print(h,'-dpng','-color','linear_solver_error_behaviour.png');        % Plot runtime results    g = figure(2);    plot(x,runtime_gmres,'b',"linewidth",1,x,runtime_cg,'r',"linewidth",1,x,runtime_minres,'g',"linewidth",1);	grid on;	set(gca, "linewidth", 0.5 , "fontsize", 12);	axis([2 MIN_MESH_SIZE]);	title('Runtime behaviour compared for GMRES, CG and MINRES for varying mesh sizes')	leg = legend ({"GMRES"}, "CG" , "MINRES");	legend (leg, "location", "northwest");	set (leg, "fontsize", 15 , "linewidth", 1);    xlabel("1/MESH SIZE");    ylabel("Runtime in seconds");	print(g,'-dpng','-color','linear_solver_runtime.png')       end